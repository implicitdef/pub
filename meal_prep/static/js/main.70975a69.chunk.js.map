{"version":3,"sources":["data/ingredients.ts","structure.ts","data/plan006.ts","logic.ts","utils.ts","App.tsx","index.tsx"],"names":["allIngredients","poulet_cru","dsl","riz_sec","beurre","huile_olive","coulis_de_tomates","thon_boite_egoutte","fromage_blanc_3_2percent","fromage_blanc_2_8percent","oeuf","beurre_cacahuete","beurre_cacahuete_mamie_bio","lait","lait_d_amande","flocons_avoine_complete_quaker","flocons_avoine_sans_gluten_grillon_or","whey","epinards_surgeles","courgette","carotte","pomme","banane","baseQuantity","prots","fats","carbs","fibers","stats","caloriesByMacro","plan2550cals_sans_gluten_ni_lactose_ni_surgeles_mais_avec_plus_de_fibres","meals","name","content","target","nbProtsPerKgOfBodyweight","fatPercentage","totalFibers","totalCalories","computeStatsOfIngredientForQuantity","quantity","ingredient","computeStat","stat","r","computeStatsOfMeal","meal","sumStats","Object","entries","map","statsArray","reduce","previous","current","roundWithDecimals","nb","decimals","factor","Math","pow","round","CURRENT_PLAN","MealIngredient","status","q","displayNameAndQuantity","MealComponent","className","colSpan","idx","TotalRow","targetStats","Row","value","TargetRow","App","plan","computeStatsOfMeals","nbFats","nbProts","computeStatsOfTarget","protCalories","fatsCalories","carbsCalories","calories","percentages","computeDiagnostic","shoppingList","nbDays","quantitiesTotal","forEach","filter","_","unit","computeShoppingList","m","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70975a69.chunk.js","sourcesContent":["// idée d'ingrédients à intégrer :\n// fromage salakis (très bon, très fat/prot)\n\nimport { Ingredient } from \"../structure\";\n\nexport const allIngredients = {\n  poulet_cru: dsl(\"100g\", 24, 2, 0, 0),\n\n  riz_sec: dsl(\"100g\", 6.7, 0.5, 80, 0.7), // il y a des infos contradictoires sur le quantité de fibres dans le riz. Ce chiffre est plutôt conservateur\n  beurre: dsl(\"100g\", 0.7, 82, 0.5, 0),\n  huile_olive: dsl(\"100ml\", 0, 92, 92, 0),\n  coulis_de_tomates: dsl(\"100g\", 1.2, 0.1, 4.5, 1.6),\n  thon_boite_egoutte: dsl(\"100g\", 27, 8.1, 0, 0),\n  fromage_blanc_3_2percent: dsl(\"100g\", 5.7, 3.2, 6.6, 0),\n  fromage_blanc_2_8percent: dsl(\"100g\", 6.7, 2.8, 4.9, 0),\n  oeuf: dsl(\"1unit\", 6, 5, 1, 0),\n  beurre_cacahuete: dsl(\"100g\", 29, 51, 12, 6),\n  beurre_cacahuete_mamie_bio: dsl(\"100g\", 28, 48, 14, 6),\n  lait: dsl(\"100ml\", 3.3, 1.6, 4.7, 0),\n  lait_d_amande: dsl(\"100ml\", 1, 2, 6, 0.3), // pour les fibres, j'ai vu 0.2 et 0.4\n  flocons_avoine_complete_quaker: dsl(\"100g\", 11, 8, 60, 9),\n  flocons_avoine_sans_gluten_grillon_or: dsl(\"100g\", 9.7, 5.4, 61, 11), // https://www.naturalia.fr/flocons-avoine-sg-500g\n  whey: dsl(\"100g\", 75, 5.8, 7.8, 0),\n  epinards_surgeles: dsl(\"100g\", 3, 0.5, 1.4, 2.37),\n  courgette: dsl(\"1unit\", 1.3, 0.7, 5.4, 2),\n  carotte: dsl(\"1unit\", 1, 0, 7, 2.8),\n  pomme: dsl(\"1unit\", 0, 0, 25, 4.4),\n  banane: dsl(\"1unit\", 0, 1, 27, 3.1),\n};\n\nfunction dsl(\n  baseQuantity: Ingredient[\"baseQuantity\"],\n  prots: number,\n  fats: number,\n  carbs: number,\n  fibers: number\n): Ingredient {\n  return {\n    baseQuantity,\n    stats: {\n      prots,\n      fats,\n      carbs,\n      fibers,\n    },\n  };\n}\n","import { allIngredients } from \"./data/ingredients\";\n\nexport const caloriesByMacro = {\n  prots: 4,\n  fats: 9,\n  carbs: 4,\n};\n\nexport type Macro = keyof typeof caloriesByMacro;\nexport type Stat = Macro | \"fibers\";\n\nexport interface Ingredient {\n  baseQuantity: \"100ml\" | \"100g\" | \"1unit\";\n  stats: Stats;\n}\n\nexport type Stats = { [m in Stat]: number };\n\nexport type IngredientName = keyof typeof allIngredients;\n\nexport const bodyWeightInKg = 79;\n\nexport const baseTarget = {\n  nbProtsPerKgOfBodyweight: 1.5,\n  fatPercentage: 25,\n  totalFibers: 38,\n};\n\nexport interface DailyTarget {\n  totalCalories: number;\n  nbProtsPerKgOfBodyweight: number;\n  fatPercentage: number;\n  totalFibers: number;\n}\nexport interface DailyPlan {\n  meals: Meal[];\n  target?: DailyTarget;\n}\n\nexport interface Meal {\n  name: string;\n  content: Partial<Record<IngredientName, number>>;\n}\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// essayer d'utiliser les packaging en entier (thon, FB, etc.) pour 3 jours\n// l'important c'est le nb de calories, après les pourcentages de prots/fats/carbs c'est moins important ! le but c'est juste d'avoir des ordres de grandeur\n// améliorer l'utilisation du peanut butter et du whey et du FB\n\nexport const plan2550cals_sans_gluten_ni_lactose_ni_surgeles_mais_avec_plus_de_fibres: DailyPlan =\n  {\n    meals: [\n      {\n        name: \"main\",\n        // celui-là j'en suis très content\n        content: {\n          poulet_cru: 300 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n          // bien rincer le riz avant\n          // envisager du riz brun (pour les fibres)\n          riz_sec: 220,\n          beurre: 5,\n          huile_olive: 15,\n          thon_boite_egoutte: 112 / 3, // une boite fait 112\n          oeuf: 6 / 3, // faire les oeufs à la poele\n        },\n      },\n      {\n        name: \"peanut butter\",\n        content: {\n          beurre_cacahuete_mamie_bio: 350 / 6, // un pot typique fait 350g\n          lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n        },\n      },\n      {\n        name: \"shaker whey\",\n        content: {\n          whey: 30, // une cuillere à raz fait 25g\n        },\n      },\n      {\n        name: \"bol de céréales\",\n        content: {\n          lait_d_amande: 100,\n          flocons_avoine_sans_gluten_grillon_or: 100,\n        },\n      },\n      {\n        name: \"fruits et légumes\",\n        content: {\n          pomme: 2,\n          banane: 1,\n          // attention on a pas de \"leafy vegetable\"\n          courgette: 1,\n          carotte: 1,\n        },\n      },\n    ],\n    target: {\n      ...baseTarget,\n      totalCalories: 2550,\n    },\n  };\n","import { allIngredients } from \"./data/ingredients\";\nimport {\n  bodyWeightInKg,\n  caloriesByMacro,\n  DailyPlan,\n  DailyTarget,\n  IngredientName,\n  Macro,\n  Stats,\n  Meal,\n  Stat,\n} from \"./structure\";\n\nexport function computeStatsOfIngredientForQuantity(\n  name: IngredientName,\n  quantity: number\n): Stats {\n  const ingredient = allIngredients[name];\n  function computeStat(stat: Stat) {\n    const r = quantity * ingredient.stats[stat];\n    if (\n      ingredient.baseQuantity === \"100g\" ||\n      ingredient.baseQuantity === \"100ml\"\n    ) {\n      return r / 100;\n    }\n    return r;\n  }\n  return {\n    prots: computeStat(\"prots\"),\n    fats: computeStat(\"fats\"),\n    carbs: computeStat(\"carbs\"),\n    fibers: computeStat(\"fibers\"),\n  };\n}\n\nexport function computeStatsOfMeal(meal: Meal): Stats {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n\n  return sumStats(\n    entries.map(([name, quantity]) => {\n      return computeStatsOfIngredientForQuantity(name, quantity);\n    })\n  );\n}\n\nexport function computeStatsOfMeals(meals: Meal[]): Stats {\n  return sumStats(meals.map(computeStatsOfMeal));\n}\n\nexport function sumStats(statsArray: Stats[]): Stats {\n  return statsArray.reduce((previous: Stats, current: Stats) => {\n    return {\n      prots: previous.prots + current.prots,\n      fats: previous.fats + current.fats,\n      carbs: previous.carbs + current.carbs,\n      fibers: previous.fibers + current.fibers,\n    };\n  });\n}\n\nexport function computeDiagnostic(stats: Stats) {\n  const protCalories = stats.prots * caloriesByMacro.prots;\n  const fatsCalories = stats.fats * caloriesByMacro.fats;\n  const carbsCalories = stats.carbs * caloriesByMacro.carbs;\n  const calories = protCalories + fatsCalories + carbsCalories;\n\n  return {\n    calories,\n    percentages: {\n      prots: (100 * protCalories) / calories,\n      fats: (100 * fatsCalories) / calories,\n      carbs: (100 * carbsCalories) / calories,\n    },\n  };\n}\n\nexport function computeStatsOfTarget(target: DailyTarget): Stats {\n  const { totalCalories, fatPercentage, nbProtsPerKgOfBodyweight } = target;\n  const nbFats = (totalCalories * (fatPercentage / 100)) / caloriesByMacro.fats;\n  const nbProts = bodyWeightInKg * nbProtsPerKgOfBodyweight;\n  const nbCarbs =\n    (totalCalories -\n      nbFats * caloriesByMacro.fats -\n      nbProts * caloriesByMacro.prots) /\n    caloriesByMacro.carbs;\n  return {\n    prots: nbProts,\n    fats: nbFats,\n    carbs: nbCarbs,\n    fibers: target.totalFibers,\n  };\n}\n\nexport function computeShoppingList(plan: DailyPlan, nbDays: number): string[] {\n  const quantitiesTotal: Partial<Record<IngredientName, number>> = {};\n  plan.meals.forEach((meal) => {\n    const entries = Object.entries(meal.content) as [IngredientName, number][];\n    entries.forEach(([name, quantity]) => {\n      quantitiesTotal[name] = (quantitiesTotal[name] || 0) + quantity * nbDays;\n    });\n  });\n\n  const entries = Object.entries(quantitiesTotal) as [IngredientName, number][];\n  return entries\n    .filter((_) => _[1] > 0)\n    .map(([name, quantity]) => {\n      const { baseQuantity } = allIngredients[name];\n      const unit =\n        baseQuantity === \"100g\" ? \"g\" : baseQuantity === \"100ml\" ? \"ml\" : \"\";\n      return `${quantity}${unit} ${name}`;\n    });\n}\n","export function roundWithDecimals(nb: number, decimals: number): number {\n  const factor = Math.pow(10, decimals);\n  return Math.round(nb * factor) / factor;\n}\n\n/**\n * Convert a number to a color using hsl, with range definition.\n * Example: if min/max are 0/1, and i is 0.75, the color is closer to green.\n * Example: if min/max are 0.5/1, and i is 0.75, the color is in the middle between red and green.\n * @param i (floating point, range 0 to 1)\n * param min (floating point, range 0 to 1, all i at and below this is red)\n * param max (floating point, range 0 to 1, all i at and above this is green)\n */\nexport function numberToColorHsl(i: number, min: number, max: number) {\n  var ratio = i;\n  if (min > 0 || max < 1) {\n    if (i < min) {\n      ratio = 0;\n    } else if (i > max) {\n      ratio = 1;\n    } else {\n      var range = max - min;\n      ratio = (i - min) / range;\n    }\n  }\n\n  // as the function expects a value between 0 and 1, and red = 0° and green = 120°\n  // we convert the input to the appropriate hue value\n  var hue = (ratio * 1.2) / 3.6;\n  //if (minMaxFactor!=1) hue /= minMaxFactor;\n  //console.log(hue);\n\n  // we convert hsl to rgb (saturation 100%, lightness 50%)\n  var rgb = hslToRgb(hue, 1, 0.5);\n  // we format to css value and return\n  return \"rgb(\" + rgb[0] + \",\" + rgb[1] + \",\" + rgb[2] + \")\";\n}\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {number}  h       The hue\n * @param   {number}  s       The saturation\n * @param   {number}  l       The lightness\n * @return  {Array}           The RGB representation\n */\nfunction hslToRgb(h: number, s: number, l: number) {\n  var r, g, b;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import React from \"react\";\nimport { allIngredients } from \"./data/ingredients\";\nimport { plan2550cals_sans_gluten_ni_lactose_ni_surgeles_mais_avec_plus_de_fibres } from \"./data/plan006\";\nimport {\n  computeDiagnostic,\n  computeShoppingList,\n  computeStatsOfIngredientForQuantity,\n  computeStatsOfMeal,\n  computeStatsOfMeals,\n  computeStatsOfTarget,\n} from \"./logic\";\nimport {\n  bodyWeightInKg,\n  DailyPlan,\n  IngredientName,\n  Meal,\n  Stat,\n  Stats,\n} from \"./structure\";\nimport \"./style.css\";\nimport { roundWithDecimals } from \"./utils\";\n\nconst CURRENT_PLAN: DailyPlan =\n  plan2550cals_sans_gluten_ni_lactose_ni_surgeles_mais_avec_plus_de_fibres;\n\nfunction MealIngredient({\n  name,\n  quantity,\n}: {\n  name: IngredientName;\n  quantity: number;\n}) {\n  const ingredient = allIngredients[name];\n\n  function displayNameAndQuantity() {\n    const q = roundWithDecimals(quantity, 2);\n    switch (ingredient.baseQuantity) {\n      case \"1unit\":\n        return `${q} ${name}`;\n      case \"100g\":\n        return `${q}g de ${name}`;\n      case \"100ml\":\n        return `${q}ml de ${name}`;\n    }\n  }\n  const status = computeStatsOfIngredientForQuantity(name, quantity);\n\n  return (\n    <tr>\n      <td>{displayNameAndQuantity()}</td>\n      <td>{roundWithDecimals(status.prots, 1)}</td>\n      <td>{roundWithDecimals(status.fats, 1)}</td>\n      <td>{roundWithDecimals(status.carbs, 1)}</td>\n      <td>{roundWithDecimals(status.fibers, 1)}</td>\n    </tr>\n  );\n}\n\nfunction MealComponent(meal: Meal) {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n  const stats = computeStatsOfMeal(meal);\n  return (\n    <>\n      <tr className=\"meal-title\">\n        <td colSpan={4}>{meal.name}</td>\n      </tr>\n      <tr>\n        <th>ingredient</th>\n        <th>prots</th>\n        <th>fats</th>\n        <th>carbs</th>\n        <th>fibers</th>\n      </tr>\n      {entries.map(([name, quantity], idx) => {\n        if (quantity <= 0) return null;\n        return <MealIngredient {...{ name, quantity }} />;\n      })}\n      <tr className=\"meal-total\">\n        <td></td>\n        <td>{Math.round(stats.prots)}</td>\n        <td>{Math.round(stats.fats)}</td>\n        <td>{Math.round(stats.carbs)}</td>\n        <td>{Math.round(stats.fibers)}</td>\n      </tr>\n    </>\n  );\n}\n\nfunction TotalRow({\n  stats,\n  targetStats,\n}: {\n  stats: Stats;\n  targetStats: Stats | null;\n}) {\n  function Row({ stat }: { stat: Stat }) {\n    const value = stats[stat];\n    return <td>{Math.round(value)}</td>;\n  }\n\n  return (\n    <tr className=\"total\">\n      <td>all</td>\n      <Row stat={\"prots\"} />\n      <Row stat={\"fats\"} />\n      <Row stat={\"carbs\"} />\n      <Row stat={\"fibers\"} />\n    </tr>\n  );\n}\n\nfunction TargetRow({ targetStats }: { targetStats: Stats }) {\n  return (\n    <tr className=\"target\">\n      <td>target</td>\n      <td>{Math.round(targetStats.prots)}</td>\n      <td>{Math.round(targetStats.fats)}</td>\n      <td>{Math.round(targetStats.carbs)}</td>\n      <td>{Math.round(targetStats.fibers)}</td>\n    </tr>\n  );\n}\n\nfunction App() {\n  const plan = CURRENT_PLAN;\n  const { meals, target } = plan;\n  const stats = computeStatsOfMeals(meals);\n  const targetStats = target ? computeStatsOfTarget(target) : null;\n  const { calories, percentages } = computeDiagnostic(stats);\n  const nbDays = 3;\n  const shoppingList = computeShoppingList(plan, nbDays);\n  return (\n    <>\n      <table>\n        {meals.map((m) => {\n          return <MealComponent {...m} />;\n        })}\n        <tr className=\"spacer\">\n          <td colSpan={5}></td>\n        </tr>\n\n        <TotalRow stats={stats} targetStats={targetStats} />\n        {targetStats ? <TargetRow targetStats={targetStats} /> : null}\n      </table>\n\n      <div className=\"diagnostic\">\n        <p>total calories = {Math.round(calories)} calories</p>\n        <p>Percentages :</p>\n        <ul>\n          <li>\n            {Math.round(percentages.prots)}% of prots (\n            {roundWithDecimals(stats.prots / bodyWeightInKg, 2)}/kg of\n            bodyweight, for {bodyWeightInKg}kg)\n          </li>\n          <li>{Math.round(percentages.fats)}% of fats</li>\n          <li>{Math.round(percentages.carbs)}% of carbs</li>\n        </ul>\n      </div>\n      <div className=\"shopping-list\">\n        <p>Shopping list pour {nbDays} jours</p>\n        <ul>\n          {shoppingList.map((str) => {\n            return <li key={str}>{str}</li>;\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}