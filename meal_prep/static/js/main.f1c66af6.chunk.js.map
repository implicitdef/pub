{"version":3,"sources":["structure.ts","data/allPlans.ts","data/plan001.ts","data/plan002.ts","data/plan003.ts","data/plan004.ts","data/plan005.ts","data/plan006.ts","data/plan007.ts","data/plan008.ts","data/ingredients.ts","logic.ts","utils.ts","App.tsx","index.tsx"],"names":["caloriesByMacro","baseTarget","nbProtsPerKgOfBodyweight","fatPercentage","totalFibers","allPlans","name","meals","content","poulet_cru","riz_sec","beurre","huile_olive","coulis_de_tomates","thon_boite_egoutte","oeuf","beurre_cacahuete","lait","flocons_avoine_complete_quaker","fromage_blanc_3_2percent","whey","pomme","banane","epinards_surgeles","courgette","fromage_blanc_2_8percent","target","totalCalories","beurre_cacahuete_mamie_bio","lait_d_amande","flocons_avoine_sans_gluten_grillon_or","carotte","avocado","allIngredients","dsl","baseQuantity","prots","fats","carbs","fibers","stats","computeStatsOfIngredientForQuantity","quantity","ingredient","computeStat","stat","r","computeStatsOfMeal","meal","sumStats","Object","entries","map","statsArray","reduce","previous","current","roundWithDecimals","nb","decimals","factor","Math","pow","round","MealIngredient","status","q","displayNameAndQuantity","MealComponent","className","colSpan","idx","TotalRow","targetStats","Row","value","TargetRow","PlanSelector","plan","setPlan","onChange","useCallback","e","parseInt","findIndex","_","getPlanIndex","p","i","App","useState","length","computeStatsOfMeals","nbFats","nbProts","computeStatsOfTarget","protCalories","fatsCalories","carbsCalories","calories","percentages","computeDiagnostic","shoppingList","nbDays","quantitiesTotal","forEach","filter","unit","computeShoppingList","m","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1c66af6.chunk.js","sourcesContent":["import { allIngredients } from \"./data/ingredients\";\n\nexport const caloriesByMacro = {\n  prots: 4,\n  fats: 9,\n  carbs: 4,\n};\n\nexport type Macro = keyof typeof caloriesByMacro;\nexport type Stat = Macro | \"fibers\";\n\nexport interface Ingredient {\n  baseQuantity: \"100ml\" | \"100g\" | \"1unit\";\n  stats: Stats;\n}\n\nexport type Stats = { [m in Stat]: number };\n\nexport type IngredientName = keyof typeof allIngredients;\n\nexport const bodyWeightInKg = 79;\n\nexport const baseTarget = {\n  nbProtsPerKgOfBodyweight: 1.5,\n  fatPercentage: 25,\n  totalFibers: 38,\n};\n\nexport interface DailyTarget {\n  totalCalories: number;\n  nbProtsPerKgOfBodyweight: number;\n  fatPercentage: number;\n  totalFibers: number;\n}\nexport interface DailyPlan {\n  name: string;\n  meals: Meal[];\n  target?: DailyTarget;\n}\n\nexport interface Meal {\n  name: string;\n  content: Partial<Record<IngredientName, number>>;\n}\n","import { plan001 } from \"./plan001\";\nimport { plan002 } from \"./plan002\";\nimport { plan003 } from \"./plan003\";\nimport { plan004 } from \"./plan004\";\nimport { plan005 } from \"./plan005\";\nimport { plan006 } from \"./plan006\";\nimport { plan007 } from \"./plan007\";\nimport { plan008 } from \"./plan008\";\n\nexport const allPlans = [\n  plan001,\n  plan002,\n  plan003,\n  plan004,\n  plan005,\n  plan006,\n  plan007,\n  plan008,\n];\n","import { DailyPlan } from \"../structure\";\n\nexport const plan001: DailyPlan = {\n  name: \"2700cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 60,\n        riz_sec: 250,\n        beurre: 11,\n        huile_olive: 18,\n        coulis_de_tomates: 100,\n        thon_boite_egoutte: 112 / 4, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"breakfastMix\",\n      content: {\n        beurre_cacahuete: 100,\n        lait: 100,\n        flocons_avoine_complete_quaker: 100,\n        fromage_blanc_3_2percent: 212.5,\n        whey: 12, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan002: DailyPlan = {\n  name: \"2500cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 100,\n        riz_sec: 240,\n        beurre: 11,\n        huile_olive: 18,\n        coulis_de_tomates: 50,\n        thon_boite_egoutte: 112 / 4, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"breakfastMix\",\n      content: {\n        beurre_cacahuete: 95,\n        lait: 150,\n        flocons_avoine_complete_quaker: 50,\n        fromage_blanc_2_8percent: 150,\n        whey: 25, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2500,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan003: DailyPlan = {\n  name: \"2500cals_no_gluten\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 100,\n        riz_sec: 280,\n        beurre: 11,\n        huile_olive: 18,\n        coulis_de_tomates: 0,\n        thon_boite_egoutte: 112 / 4, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"breakfastMix\",\n      content: {\n        beurre_cacahuete: 95,\n        lait: 300,\n        flocons_avoine_complete_quaker: 0,\n        fromage_blanc_2_8percent: 150,\n        whey: 15, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2500,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// essayer d'utiliser les packaging en entier (thon, FB, etc.) pour 3 jours\n// l'important c'est le nb de calories, après les pourcentages de prots/fats/carbs c'est moins important ! le but c'est juste d'avoir des ordres de grandeur\n// améliorer l'utilisation du peanut butter et du whey et du FB\n\nexport const plan004: DailyPlan = {\n  name: \"2550cals_no_gluten\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // j'ai pas réussi à avoir 300g. La prochaine fois acheter 300g ou un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        riz_sec: 280, // bien rincer le riz avant\n        beurre: 11,\n        huile_olive: 18,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1, // faire les oeufs à la poele, c'est plus simple\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete: 350 / 3, // un pot typique fait 350g\n        lait: 80 / 3, // devrait aider à diluer le pb. à mettre direct dans le pot et mélanger\n      },\n    },\n    {\n      name: \"shaker whey\",\n      content: {\n        lait: 250,\n        // fromage_blanc_2_8percent: 1000 / 3, // 1 pot fait 1kg\n        whey: 25, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2550,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// essayer d'utiliser les packaging en entier (thon, FB, etc.) pour 3 jours\n// l'important c'est le nb de calories, après les pourcentages de prots/fats/carbs c'est moins important ! le but c'est juste d'avoir des ordres de grandeur\n// améliorer l'utilisation du peanut butter et du whey et du FB\n\nexport const plan005: DailyPlan = {\n  name: \"plan2550cals_mamie_bio\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // j'ai pas réussi à avoir 300g. La prochaine fois acheter 300g ou un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        riz_sec: 285, // bien rincer le riz avant\n        beurre: 11,\n        huile_olive: 18,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1, // faire les oeufs à la poele, c'est plus simple\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_mamie_bio: 350 / 3, // un pot typique fait 350g\n        lait: 20, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    {\n      name: \"shaker whey\",\n      content: {\n        lait: 250,\n        // fromage_blanc_2_8percent: 1000 / 3, // 1 pot fait 1kg\n        whey: 25, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2550,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// pas de lactose\n// pas de surgelés\n// plus de fibres (mais pas encore vraiment la dose recommandée)\nexport const plan006: DailyPlan = {\n  name: \"plan2550cals_sans_gluten_ni_lactose_ni_surgeles_mais_avec_plus_de_fibres\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 220,\n        beurre: 5,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 6 / 3, // faire les oeufs à la poele\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_mamie_bio: 350 / 6, // un pot typique fait 350g\n        lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    {\n      name: \"shaker whey\",\n      content: {\n        whey: 30, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"bol de céréales\",\n      content: {\n        lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 100,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 2,\n        banane: 1,\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2550,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2650 cals\n// pas de gluten\n// pas de lactose\n// pas de surgelés\n// plus de fibres (essayer d'avoir la dose recommandée)\n// ajuster macros pour pas de sport (moins de prots)\nexport const plan007: DailyPlan = {\n  name: \"plan2650cals_sans_gluten_ni_lactose_ni_surgeles_et_toutes_fibres_et_moins_proteines\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 260 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 250,\n        beurre: 10,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        // oeuf: 6 / 3, // faire les oeufs à la poele\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_mamie_bio: 350 / 6, // un pot typique fait 350g\n        lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 2,\n        banane: 1,\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2650,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2650 cals\n// pas de gluten\n// pas de lactose\n// pas de surgelés\n// plus de fibres (essayer d'avoir la dose recommandée)\n// ajuster macros pour pas de sport (moins de prots)\nexport const plan008: DailyPlan = {\n  name: \"plan2650cals sans_vraiment_aucun_gluten ni_lactose ni_surgeles et_un_poil_trop_de_fibres et_moins_proteines\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 255,\n        beurre: 10,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    // {\n    //   name: \"peanut butter\",\n    //   content: {\n    //     beurre_cacahuete_mamie_bio: 350 / 6, // un pot typique fait 350g\n    //     lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n    //   },\n    // },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 1,\n        banane: 2,\n        avocado: 1,\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2650,\n  },\n};\n","// idée d'ingrédients à intégrer :\n// fromage salakis (très bon, très fat/prot, mais lactose)\n\nimport { Ingredient } from \"../structure\";\n\nexport const allIngredients = {\n  poulet_cru: dsl(\"100g\", 24, 2, 0, 0),\n  // envisager riz complet , pour avoir des fibres\n  riz_sec: dsl(\"100g\", 6.7, 0.5, 80, 0.7), // il y a des infos contradictoires sur le quantité de fibres dans le riz. Ce chiffre est plutôt conservateur\n  beurre: dsl(\"100g\", 0.7, 82, 0.5, 0),\n  huile_olive: dsl(\"100ml\", 0, 92, 92, 0),\n  coulis_de_tomates: dsl(\"100g\", 1.2, 0.1, 4.5, 1.6),\n  thon_boite_egoutte: dsl(\"100g\", 27, 8.1, 0, 0),\n  fromage_blanc_3_2percent: dsl(\"100g\", 5.7, 3.2, 6.6, 0),\n  fromage_blanc_2_8percent: dsl(\"100g\", 6.7, 2.8, 4.9, 0),\n  oeuf: dsl(\"1unit\", 6, 5, 1, 0),\n  beurre_cacahuete: dsl(\"100g\", 29, 51, 12, 6),\n  beurre_cacahuete_mamie_bio: dsl(\"100g\", 28, 48, 14, 6),\n  lait: dsl(\"100ml\", 3.3, 1.6, 4.7, 0),\n  lait_d_amande: dsl(\"100ml\", 1, 2, 6, 0.3), // pour les fibres, j'ai vu 0.2 et 0.4\n  flocons_avoine_complete_quaker: dsl(\"100g\", 11, 8, 60, 9),\n  flocons_avoine_sans_gluten_grillon_or: dsl(\"100g\", 9.7, 5.4, 61, 11), // https://www.naturalia.fr/flocons-avoine-sg-500g\n  whey: dsl(\"100g\", 75, 5.8, 7.8, 0),\n  epinards_surgeles: dsl(\"100g\", 3, 0.5, 1.4, 2.37),\n  courgette: dsl(\"1unit\", 1.3, 0.7, 5.4, 2),\n  carotte: dsl(\"1unit\", 1, 0, 7, 2.8),\n  pomme: dsl(\"1unit\", 0, 0, 25, 4.4),\n  banane: dsl(\"1unit\", 0, 1, 27, 3.1),\n  avocado: dsl(\"1unit\", 4, 29.5, 17, 13.5),\n};\n\nfunction dsl(\n  baseQuantity: Ingredient[\"baseQuantity\"],\n  prots: number,\n  fats: number,\n  carbs: number,\n  fibers: number\n): Ingredient {\n  return {\n    baseQuantity,\n    stats: {\n      prots,\n      fats,\n      carbs,\n      fibers,\n    },\n  };\n}\n","import { allIngredients } from \"./data/ingredients\";\nimport {\n  bodyWeightInKg,\n  caloriesByMacro,\n  DailyPlan,\n  DailyTarget,\n  IngredientName,\n  Macro,\n  Stats,\n  Meal,\n  Stat,\n} from \"./structure\";\n\nexport function computeStatsOfIngredientForQuantity(\n  name: IngredientName,\n  quantity: number\n): Stats {\n  const ingredient = allIngredients[name];\n  function computeStat(stat: Stat) {\n    const r = quantity * ingredient.stats[stat];\n    if (\n      ingredient.baseQuantity === \"100g\" ||\n      ingredient.baseQuantity === \"100ml\"\n    ) {\n      return r / 100;\n    }\n    return r;\n  }\n  return {\n    prots: computeStat(\"prots\"),\n    fats: computeStat(\"fats\"),\n    carbs: computeStat(\"carbs\"),\n    fibers: computeStat(\"fibers\"),\n  };\n}\n\nexport function computeStatsOfMeal(meal: Meal): Stats {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n\n  return sumStats(\n    entries.map(([name, quantity]) => {\n      return computeStatsOfIngredientForQuantity(name, quantity);\n    })\n  );\n}\n\nexport function computeStatsOfMeals(meals: Meal[]): Stats {\n  return sumStats(meals.map(computeStatsOfMeal));\n}\n\nexport function sumStats(statsArray: Stats[]): Stats {\n  return statsArray.reduce((previous: Stats, current: Stats) => {\n    return {\n      prots: previous.prots + current.prots,\n      fats: previous.fats + current.fats,\n      carbs: previous.carbs + current.carbs,\n      fibers: previous.fibers + current.fibers,\n    };\n  });\n}\n\nexport function computeDiagnostic(stats: Stats) {\n  const protCalories = stats.prots * caloriesByMacro.prots;\n  const fatsCalories = stats.fats * caloriesByMacro.fats;\n  const carbsCalories = stats.carbs * caloriesByMacro.carbs;\n  const calories = protCalories + fatsCalories + carbsCalories;\n\n  return {\n    calories,\n    percentages: {\n      prots: (100 * protCalories) / calories,\n      fats: (100 * fatsCalories) / calories,\n      carbs: (100 * carbsCalories) / calories,\n    },\n  };\n}\n\nexport function computeStatsOfTarget(target: DailyTarget): Stats {\n  const { totalCalories, fatPercentage, nbProtsPerKgOfBodyweight } = target;\n  const nbFats = (totalCalories * (fatPercentage / 100)) / caloriesByMacro.fats;\n  const nbProts = bodyWeightInKg * nbProtsPerKgOfBodyweight;\n  const nbCarbs =\n    (totalCalories -\n      nbFats * caloriesByMacro.fats -\n      nbProts * caloriesByMacro.prots) /\n    caloriesByMacro.carbs;\n  return {\n    prots: nbProts,\n    fats: nbFats,\n    carbs: nbCarbs,\n    fibers: target.totalFibers,\n  };\n}\n\nexport function computeShoppingList(plan: DailyPlan, nbDays: number): string[] {\n  const quantitiesTotal: Partial<Record<IngredientName, number>> = {};\n  plan.meals.forEach((meal) => {\n    const entries = Object.entries(meal.content) as [IngredientName, number][];\n    entries.forEach(([name, quantity]) => {\n      quantitiesTotal[name] = (quantitiesTotal[name] || 0) + quantity * nbDays;\n    });\n  });\n\n  const entries = Object.entries(quantitiesTotal) as [IngredientName, number][];\n  return entries\n    .filter((_) => _[1] > 0)\n    .map(([name, quantity]) => {\n      const { baseQuantity } = allIngredients[name];\n      const unit =\n        baseQuantity === \"100g\" ? \"g\" : baseQuantity === \"100ml\" ? \"ml\" : \"\";\n      return `${quantity}${unit} ${name}`;\n    });\n}\n","export function roundWithDecimals(nb: number, decimals: number): number {\n  const factor = Math.pow(10, decimals);\n  return Math.round(nb * factor) / factor;\n}\n\n/**\n * Convert a number to a color using hsl, with range definition.\n * Example: if min/max are 0/1, and i is 0.75, the color is closer to green.\n * Example: if min/max are 0.5/1, and i is 0.75, the color is in the middle between red and green.\n * @param i (floating point, range 0 to 1)\n * param min (floating point, range 0 to 1, all i at and below this is red)\n * param max (floating point, range 0 to 1, all i at and above this is green)\n */\nexport function numberToColorHsl(i: number, min: number, max: number) {\n  var ratio = i;\n  if (min > 0 || max < 1) {\n    if (i < min) {\n      ratio = 0;\n    } else if (i > max) {\n      ratio = 1;\n    } else {\n      var range = max - min;\n      ratio = (i - min) / range;\n    }\n  }\n\n  // as the function expects a value between 0 and 1, and red = 0° and green = 120°\n  // we convert the input to the appropriate hue value\n  var hue = (ratio * 1.2) / 3.6;\n  //if (minMaxFactor!=1) hue /= minMaxFactor;\n  //console.log(hue);\n\n  // we convert hsl to rgb (saturation 100%, lightness 50%)\n  var rgb = hslToRgb(hue, 1, 0.5);\n  // we format to css value and return\n  return \"rgb(\" + rgb[0] + \",\" + rgb[1] + \",\" + rgb[2] + \")\";\n}\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {number}  h       The hue\n * @param   {number}  s       The saturation\n * @param   {number}  l       The lightness\n * @return  {Array}           The RGB representation\n */\nfunction hslToRgb(h: number, s: number, l: number) {\n  var r, g, b;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { allPlans } from \"./data/allPlans\";\nimport { allIngredients } from \"./data/ingredients\";\nimport {\n  computeDiagnostic,\n  computeShoppingList,\n  computeStatsOfIngredientForQuantity,\n  computeStatsOfMeal,\n  computeStatsOfMeals,\n  computeStatsOfTarget,\n} from \"./logic\";\nimport {\n  bodyWeightInKg,\n  DailyPlan,\n  IngredientName,\n  Meal,\n  Stat,\n  Stats,\n} from \"./structure\";\nimport \"./style.css\";\nimport { roundWithDecimals } from \"./utils\";\n\nfunction MealIngredient({\n  name,\n  quantity,\n}: {\n  name: IngredientName;\n  quantity: number;\n}) {\n  const ingredient = allIngredients[name];\n\n  function displayNameAndQuantity() {\n    const q = roundWithDecimals(quantity, 2);\n    switch (ingredient.baseQuantity) {\n      case \"1unit\":\n        return `${q} ${name}`;\n      case \"100g\":\n        return `${q}g de ${name}`;\n      case \"100ml\":\n        return `${q}ml de ${name}`;\n    }\n  }\n  const status = computeStatsOfIngredientForQuantity(name, quantity);\n\n  return (\n    <tr>\n      <td>{displayNameAndQuantity()}</td>\n      <td>{roundWithDecimals(status.prots, 1)}</td>\n      <td>{roundWithDecimals(status.fats, 1)}</td>\n      <td>{roundWithDecimals(status.carbs, 1)}</td>\n      <td>{roundWithDecimals(status.fibers, 1)}</td>\n    </tr>\n  );\n}\n\nfunction MealComponent(meal: Meal) {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n  const stats = computeStatsOfMeal(meal);\n  return (\n    <>\n      <tr className=\"meal-title\">\n        <td colSpan={4}>{meal.name}</td>\n      </tr>\n      <tr>\n        <th>ingredient</th>\n        <th>prots</th>\n        <th>fats</th>\n        <th>carbs</th>\n        <th>fibers</th>\n      </tr>\n      {entries.map(([name, quantity], idx) => {\n        if (quantity <= 0) return null;\n        return <MealIngredient {...{ name, quantity }} />;\n      })}\n      <tr className=\"meal-total\">\n        <td></td>\n        <td>{Math.round(stats.prots)}</td>\n        <td>{Math.round(stats.fats)}</td>\n        <td>{Math.round(stats.carbs)}</td>\n        <td>{Math.round(stats.fibers)}</td>\n      </tr>\n    </>\n  );\n}\n\nfunction TotalRow({\n  stats,\n  targetStats,\n}: {\n  stats: Stats;\n  targetStats: Stats | null;\n}) {\n  function Row({ stat }: { stat: Stat }) {\n    const value = stats[stat];\n    return <td>{Math.round(value)}</td>;\n  }\n\n  return (\n    <tr className=\"total\">\n      <td>all</td>\n      <Row stat={\"prots\"} />\n      <Row stat={\"fats\"} />\n      <Row stat={\"carbs\"} />\n      <Row stat={\"fibers\"} />\n    </tr>\n  );\n}\n\nfunction TargetRow({ targetStats }: { targetStats: Stats }) {\n  return (\n    <tr className=\"target\">\n      <td>target</td>\n      <td>{Math.round(targetStats.prots)}</td>\n      <td>{Math.round(targetStats.fats)}</td>\n      <td>{Math.round(targetStats.carbs)}</td>\n      <td>{Math.round(targetStats.fibers)}</td>\n    </tr>\n  );\n}\n\nfunction PlanSelector({\n  plan,\n  setPlan,\n}: {\n  plan: DailyPlan;\n  setPlan: (p: DailyPlan) => void;\n}) {\n  const onChange = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setPlan(allPlans[parseInt(e.target.value, 10)]);\n    },\n    [setPlan]\n  );\n\n  function getPlanIndex(plan: DailyPlan) {\n    return allPlans.findIndex((_) => _ === plan);\n  }\n\n  return (\n    <select value={getPlanIndex(plan)} onChange={onChange}>\n      {allPlans.map((p, i) => {\n        return (\n          <option key={i} value={i}>\n            {p.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nfunction App() {\n  const [plan, setPlan] = useState<DailyPlan>(allPlans[allPlans.length - 1]);\n\n  const { meals, target } = plan;\n  const stats = computeStatsOfMeals(meals);\n  const targetStats = target ? computeStatsOfTarget(target) : null;\n  const { calories, percentages } = computeDiagnostic(stats);\n  const nbDays = 3;\n  const shoppingList = computeShoppingList(plan, nbDays);\n  return (\n    <>\n      <PlanSelector {...{ plan, setPlan }} />\n      <table>\n        {meals.map((m) => {\n          return <MealComponent {...m} />;\n        })}\n        <tr className=\"spacer\">\n          <td colSpan={5}></td>\n        </tr>\n\n        <TotalRow stats={stats} targetStats={targetStats} />\n        {targetStats ? <TargetRow targetStats={targetStats} /> : null}\n      </table>\n\n      <div className=\"diagnostic\">\n        <p>total calories = {Math.round(calories)} calories</p>\n        <p>Percentages :</p>\n        <ul>\n          <li>\n            {Math.round(percentages.prots)}% of prots (\n            {roundWithDecimals(stats.prots / bodyWeightInKg, 2)}/kg of\n            bodyweight, for {bodyWeightInKg}kg)\n          </li>\n          <li>{Math.round(percentages.fats)}% of fats</li>\n          <li>{Math.round(percentages.carbs)}% of carbs</li>\n        </ul>\n      </div>\n      <div className=\"shopping-list\">\n        <p>Shopping list pour {nbDays} jours</p>\n        <ul>\n          {shoppingList.map((str) => {\n            return <li key={str}>{str}</li>;\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}