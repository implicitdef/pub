{"version":3,"sources":["data/ingredients.ts","structure.ts","data/plan006.ts","logic.ts","utils.ts","App.tsx","index.tsx"],"names":["allIngredients","poulet_cru","dsl","riz_sec","beurre","huile_olive","coulis_de_tomates","thon_boite_egoutte","fromage_blanc_3_2percent","fromage_blanc_2_8percent","oeuf","beurre_cacahuete","beurre_cacahuete_mamie_bio","lait","lait_d_amande","flocons_avoine","whey","epinards_surgeles","courgette","carotte","pomme","banane","baseQuantity","prots","fats","carbs","macros","caloriesByMacro","plan2550cals_sans_gluten_ni_lactose_ni_surgeles","meals","name","content","target","nbProtsPerKgOfBodyweight","fatPercentage","totalCalories","computeMacrosOfIngredientForQuantity","quantity","ingredient","computeMacro","m","r","computeMacrosOfMeal","meal","sumMacros","Object","entries","map","macrosArray","reduce","previous","current","computeMacrosOfTarget","nbFats","nbProts","roundWithDecimals","nb","decimals","factor","Math","pow","round","CURRENT_PLAN","MealIngredient","q","displayNameAndQuantity","MealComponent","className","colSpan","idx","TotalRow","targetMacros","Row","macro","value","TargetRow","App","plan","computeMacrosOfMeals","protCalories","fatsCalories","carbsCalories","calories","percentages","computeDiagnostic","shoppingList","nbDays","quantitiesTotal","forEach","filter","_","unit","computeShoppingList","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7af54b32.chunk.js","sourcesContent":["// idée d'ingrédients à intégrer :\n// fromage salakis (très bon, très fat/prot)\n\nimport { Ingredient } from \"../structure\";\n\nexport const allIngredients = {\n  poulet_cru: dsl(\"100g\", 24, 2, 0),\n  riz_sec: dsl(\"100g\", 6.7, 0.5, 80),\n  beurre: dsl(\"100g\", 0.7, 0.5, 82),\n  huile_olive: dsl(\"100ml\", 0, 0, 92),\n  coulis_de_tomates: dsl(\"100g\", 1.2, 0.1, 4.5),\n  thon_boite_egoutte: dsl(\"100g\", 8.1, 0, 27),\n  fromage_blanc_3_2percent: dsl(\"100g\", 5.7, 3.2, 6.6),\n  fromage_blanc_2_8percent: dsl(\"100g\", 6.7, 2.8, 4.9),\n  oeuf: dsl(\"1unit\", 6, 5, 1),\n  beurre_cacahuete: dsl(\"100g\", 29, 51, 12),\n  beurre_cacahuete_mamie_bio: dsl(\"100g\", 28, 48, 14),\n  lait: dsl(\"100ml\", 3.3, 1.6, 4.7),\n  lait_d_amande: dsl(\"100ml\", 5.8, 2.1, 0.6),\n  flocons_avoine: dsl(\"100g\", 11, 8, 60),\n  whey: dsl(\"100g\", 75, 5.8, 7.8),\n  epinards_surgeles: dsl(\"100g\", 3, 0.5, 1.4),\n  courgette: dsl(\"1unit\", 2.3, 0.7, 5.4),\n  carotte: dsl(\"1unit\", 1, 0, 7),\n  pomme: dsl(\"1unit\", 0, 0, 25),\n  banane: dsl(\"1unit\", 0, 1, 27),\n};\n\nfunction dsl(\n  baseQuantity: Ingredient[\"baseQuantity\"],\n  prots: number,\n  fats: number,\n  carbs: number\n): Ingredient {\n  return {\n    baseQuantity,\n    macros: {\n      prots,\n      fats,\n      carbs,\n    },\n  };\n}\n","import { allIngredients } from \"./data/ingredients\";\n\nexport const caloriesByMacro = {\n  prots: 4,\n  fats: 9,\n  carbs: 4,\n};\n\nexport type Macro = keyof typeof caloriesByMacro;\n\nexport interface Ingredient {\n  baseQuantity: \"100ml\" | \"100g\" | \"1unit\";\n  macros: Macros;\n}\n\nexport type Macros = { [m in Macro]: number };\n\nexport type IngredientName = keyof typeof allIngredients;\n\nexport const bodyWeightInKg = 79;\n\nexport const baseTarget = {\n  nbProtsPerKgOfBodyweight: 1.5,\n  fatPercentage: 25,\n};\n\nexport interface DailyTarget {\n  totalCalories: number;\n  nbProtsPerKgOfBodyweight: number;\n  fatPercentage: number;\n}\nexport interface DailyPlan {\n  meals: Meal[];\n  target?: DailyTarget;\n}\n\nexport interface Meal {\n  name: string;\n  content: Partial<Record<IngredientName, number>>;\n}\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// essayer d'utiliser les packaging en entier (thon, FB, etc.) pour 3 jours\n// l'important c'est le nb de calories, après les pourcentages de prots/fats/carbs c'est moins important ! le but c'est juste d'avoir des ordres de grandeur\n// améliorer l'utilisation du peanut butter et du whey et du FB\n\nexport const plan2550cals_sans_gluten_ni_lactose_ni_surgeles: DailyPlan = {\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        riz_sec: 300, // bien rincer le riz avant\n        beurre: 11,\n        huile_olive: 18,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1, // faire les oeufs à la poele\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_mamie_bio: 350 / 3, // un pot typique fait 350g\n        lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    {\n      name: \"shaker whey\",\n      content: {\n        // lait: 250,\n        lait_d_amande: 152,\n        // fromage_blanc_2_8percent: 1000 / 3, // 1 pot fait 1kg\n        whey: 25, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2550,\n  },\n};\n","import { allIngredients } from \"./data/ingredients\";\nimport {\n  bodyWeightInKg,\n  caloriesByMacro,\n  DailyPlan,\n  DailyTarget,\n  IngredientName,\n  Macro,\n  Macros,\n  Meal,\n} from \"./structure\";\n\nexport function computeMacrosOfIngredientForQuantity(\n  name: IngredientName,\n  quantity: number\n): Macros {\n  const ingredient = allIngredients[name];\n  function computeMacro(m: Macro) {\n    const r = quantity * ingredient.macros[m];\n    if (\n      ingredient.baseQuantity === \"100g\" ||\n      ingredient.baseQuantity === \"100ml\"\n    ) {\n      return r / 100;\n    }\n    return r;\n  }\n  return {\n    prots: computeMacro(\"prots\"),\n    fats: computeMacro(\"fats\"),\n    carbs: computeMacro(\"carbs\"),\n  };\n}\n\nexport function computeMacrosOfMeal(meal: Meal): Macros {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n\n  return sumMacros(\n    entries.map(([name, quantity]) => {\n      return computeMacrosOfIngredientForQuantity(name, quantity);\n    })\n  );\n}\n\nexport function computeMacrosOfMeals(meals: Meal[]): Macros {\n  return sumMacros(meals.map(computeMacrosOfMeal));\n}\n\nexport function sumMacros(macrosArray: Macros[]): Macros {\n  return macrosArray.reduce((previous: Macros, current: Macros) => {\n    return {\n      prots: previous.prots + current.prots,\n      fats: previous.fats + current.fats,\n      carbs: previous.carbs + current.carbs,\n    };\n  });\n}\n\nexport function computeDiagnostic(macros: Macros) {\n  const protCalories = macros.prots * caloriesByMacro.prots;\n  const fatsCalories = macros.fats * caloriesByMacro.fats;\n  const carbsCalories = macros.carbs * caloriesByMacro.carbs;\n  const calories = protCalories + fatsCalories + carbsCalories;\n\n  return {\n    calories,\n    percentages: {\n      prots: (100 * protCalories) / calories,\n      fats: (100 * fatsCalories) / calories,\n      carbs: (100 * carbsCalories) / calories,\n    },\n  };\n}\n\nexport function computeMacrosOfTarget(target: DailyTarget): Macros {\n  const { totalCalories, fatPercentage, nbProtsPerKgOfBodyweight } = target;\n  const nbFats = (totalCalories * (fatPercentage / 100)) / caloriesByMacro.fats;\n  const nbProts = bodyWeightInKg * nbProtsPerKgOfBodyweight;\n  const nbCarbs =\n    (totalCalories -\n      nbFats * caloriesByMacro.fats -\n      nbProts * caloriesByMacro.prots) /\n    caloriesByMacro.carbs;\n  return {\n    prots: nbProts,\n    fats: nbFats,\n    carbs: nbCarbs,\n  };\n}\n\nexport function computeShoppingList(plan: DailyPlan, nbDays: number): string[] {\n  const quantitiesTotal: Partial<Record<IngredientName, number>> = {};\n  plan.meals.forEach((meal) => {\n    const entries = Object.entries(meal.content) as [IngredientName, number][];\n    entries.forEach(([name, quantity]) => {\n      quantitiesTotal[name] = (quantitiesTotal[name] || 0) + quantity * nbDays;\n    });\n  });\n\n  const entries = Object.entries(quantitiesTotal) as [IngredientName, number][];\n  return entries\n    .filter((_) => _[1] > 0)\n    .map(([name, quantity]) => {\n      const { baseQuantity } = allIngredients[name];\n      const unit =\n        baseQuantity === \"100g\" ? \"g\" : baseQuantity === \"100ml\" ? \"ml\" : \"\";\n      return `${quantity}${unit} ${name}`;\n    });\n}\n","export function roundWithDecimals(nb: number, decimals: number): number {\n  const factor = Math.pow(10, decimals);\n  return Math.round(nb * factor) / factor;\n}\n\n/**\n * Convert a number to a color using hsl, with range definition.\n * Example: if min/max are 0/1, and i is 0.75, the color is closer to green.\n * Example: if min/max are 0.5/1, and i is 0.75, the color is in the middle between red and green.\n * @param i (floating point, range 0 to 1)\n * param min (floating point, range 0 to 1, all i at and below this is red)\n * param max (floating point, range 0 to 1, all i at and above this is green)\n */\nexport function numberToColorHsl(i: number, min: number, max: number) {\n  var ratio = i;\n  if (min > 0 || max < 1) {\n    if (i < min) {\n      ratio = 0;\n    } else if (i > max) {\n      ratio = 1;\n    } else {\n      var range = max - min;\n      ratio = (i - min) / range;\n    }\n  }\n\n  // as the function expects a value between 0 and 1, and red = 0° and green = 120°\n  // we convert the input to the appropriate hue value\n  var hue = (ratio * 1.2) / 3.6;\n  //if (minMaxFactor!=1) hue /= minMaxFactor;\n  //console.log(hue);\n\n  // we convert hsl to rgb (saturation 100%, lightness 50%)\n  var rgb = hslToRgb(hue, 1, 0.5);\n  // we format to css value and return\n  return \"rgb(\" + rgb[0] + \",\" + rgb[1] + \",\" + rgb[2] + \")\";\n}\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {number}  h       The hue\n * @param   {number}  s       The saturation\n * @param   {number}  l       The lightness\n * @return  {Array}           The RGB representation\n */\nfunction hslToRgb(h: number, s: number, l: number) {\n  var r, g, b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import React from \"react\";\nimport { allIngredients } from \"./data/ingredients\";\nimport { plan2550cals_sans_gluten_ni_lactose_ni_surgeles } from \"./data/plan006\";\nimport {\n  computeDiagnostic,\n  computeMacrosOfIngredientForQuantity,\n  computeMacrosOfMeal,\n  computeMacrosOfMeals,\n  computeMacrosOfTarget,\n  computeShoppingList,\n} from \"./logic\";\nimport {\n  bodyWeightInKg,\n  DailyPlan,\n  DailyTarget,\n  IngredientName,\n  Macro,\n  Macros,\n  Meal,\n} from \"./structure\";\nimport \"./style.css\";\nimport { roundWithDecimals } from \"./utils\";\n\nconst CURRENT_PLAN: DailyPlan = plan2550cals_sans_gluten_ni_lactose_ni_surgeles;\n\nfunction MealIngredient({\n  name,\n  quantity,\n}: {\n  name: IngredientName;\n  quantity: number;\n}) {\n  const ingredient = allIngredients[name];\n\n  function displayNameAndQuantity() {\n    const q = roundWithDecimals(quantity, 2);\n    switch (ingredient.baseQuantity) {\n      case \"1unit\":\n        return `${q} ${name}`;\n      case \"100g\":\n        return `${q}g de ${name}`;\n      case \"100ml\":\n        return `${q}ml de ${name}`;\n    }\n  }\n  const macros = computeMacrosOfIngredientForQuantity(name, quantity);\n\n  return (\n    <tr>\n      <td>{displayNameAndQuantity()}</td>\n      <td>{Math.round(macros.prots)}</td>\n      <td>{Math.round(macros.fats)}</td>\n      <td>{Math.round(macros.carbs)}</td>\n    </tr>\n  );\n}\n\nfunction MealComponent(meal: Meal) {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n  const macros = computeMacrosOfMeal(meal);\n  return (\n    <>\n      <tr className=\"meal-title\">\n        <td colSpan={4}>{meal.name}</td>\n      </tr>\n      <tr>\n        <th>ingredient</th>\n        <th>prots</th>\n        <th>fats</th>\n        <th>carbs</th>\n      </tr>\n      {entries.map(([name, quantity], idx) => {\n        if (quantity <= 0) return null;\n        return <MealIngredient {...{ name, quantity }} />;\n      })}\n      <tr className=\"meal-total\">\n        <td></td>\n        <td>{Math.round(macros.prots)}</td>\n        <td>{Math.round(macros.fats)}</td>\n        <td>{Math.round(macros.carbs)}</td>\n      </tr>\n    </>\n  );\n}\n\nfunction TargetComponent({\n  target,\n  actualMacros,\n}: {\n  target: DailyTarget;\n  actualMacros: Macros;\n}) {\n  const targetMacros = computeMacrosOfTarget(target);\n\n  return (\n    <div className=\"target\">\n      <p>total calories = {Math.round(target.totalCalories)} calories</p>\n      <ul>\n        <li>{roundWithDecimals(targetMacros.prots, 2)}prots</li>\n        <li>{roundWithDecimals(targetMacros.fats, 2)}fats</li>\n        <li>{roundWithDecimals(targetMacros.carbs, 2)}carbs</li>\n      </ul>\n    </div>\n  );\n}\n\nfunction TotalRow({\n  macros,\n  targetMacros,\n}: {\n  macros: Macros;\n  targetMacros: Macros | null;\n}) {\n  function Row({ macro }: { macro: Macro }) {\n    const value = macros[macro];\n    return <td>{Math.round(value)}</td>;\n  }\n\n  return (\n    <tr className=\"total\">\n      <td>all</td>\n      <Row macro={\"prots\"} />\n      <Row macro={\"fats\"} />\n      <Row macro={\"carbs\"} />\n    </tr>\n  );\n}\n\nfunction TargetRow({ targetMacros }: { targetMacros: Macros }) {\n  return (\n    <tr className=\"target\">\n      <td>target</td>\n      <td>{Math.round(targetMacros.prots)}</td>\n      <td>{Math.round(targetMacros.fats)}</td>\n      <td>{Math.round(targetMacros.carbs)}</td>\n    </tr>\n  );\n}\n\nfunction App() {\n  const plan = CURRENT_PLAN;\n  const { meals, target } = plan;\n  const macros = computeMacrosOfMeals(meals);\n  const targetMacros = target ? computeMacrosOfTarget(target) : null;\n  const { calories, percentages } = computeDiagnostic(macros);\n  const nbDays = 3;\n  const shoppingList = computeShoppingList(plan, nbDays);\n  return (\n    <>\n      <table>\n        {meals.map((m) => {\n          return <MealComponent {...m} />;\n        })}\n        <tr className=\"spacer\">\n          <td colSpan={4}></td>\n        </tr>\n\n        <TotalRow macros={macros} targetMacros={targetMacros} />\n        {targetMacros ? <TargetRow targetMacros={targetMacros} /> : null}\n      </table>\n\n      <div className=\"diagnostic\">\n        <p>total calories = {Math.round(calories)} calories</p>\n        <p>Percentages :</p>\n        <ul>\n          <li>\n            {Math.round(percentages.prots)}% of prots (\n            {roundWithDecimals(macros.prots / bodyWeightInKg, 2)}/kg of\n            bodyweight, for {bodyWeightInKg}kg)\n          </li>\n          <li>{Math.round(percentages.fats)}% of fats</li>\n          <li>{Math.round(percentages.carbs)}% of carbs</li>\n        </ul>\n      </div>\n      <div className=\"shopping-list\">\n        <p>Shopping list pour {nbDays} jours</p>\n        <ul>\n          {shoppingList.map((str) => {\n            return <li key={str}>{str}</li>;\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}