{"version":3,"sources":["structure.ts","data/allPlans.ts","data/plan001.ts","data/plan002.ts","data/plan003.ts","data/plan004.ts","data/plan005.ts","data/plan006.ts","data/plan007.ts","data/plan008.ts","data/plan009.ts","data/plan010.ts","data/plan011.ts","data/plan012.ts","data/plan013.ts","data/plan014.ts","data/plan015.ts","data/plan016.ts","data/plan017.ts","data/plan018.ts","data/plan019.ts","data/plan020.ts","data/plan021.ts","data/plan022.ts","data/plan023.ts","data/plan024.ts","data/plan025.ts","data/ingredients.ts","logic.ts","utils.ts","App.tsx","index.tsx"],"names":["caloriesByMacro","baseTarget","nbProtsPerKgOfBodyweight","fatPercentage","totalFibers","allPlans","name","meals","content","poulet_cru","riz_sec","beurre","huile_olive","coulis_de_tomates","thon_boite_egoutte","oeuf","beurre_cacahuete","lait","flocons_avoine_complete_quaker","fromage_blanc_3_2percent","whey","pomme","banane","epinards_surgeles","courgette","fromage_blanc_2_8percent","target","totalCalories","beurre_cacahuete_mamie_bio","lait_d_amande","flocons_avoine_sans_gluten_grillon_or","carotte","avocado","eau","beurre_cacahuete_go_nuts","brocoli","riz_complet_markal_bio_sec","beurre_cacahuete_go_nuts_4_epices","pates_sec","chocapic","tranche_pain_de_mie","allIngredients","dsl","weetabix","pain_de_mie","epinards_surgeles_haches_monoprix","baseQuantity","prots","fats","carbs","fibers","stats","computeStatsOfIngredientForQuantity","quantity","ingredient","computeStat","stat","r","computeStatsOfMeal","meal","sumStats","Object","entries","map","statsArray","reduce","previous","current","computeCaloriesFromStats","computeDiagnostic","calories","protCalories","fatsCalories","carbsCalories","percentages","roundWithDecimals","nb","decimals","factor","Math","pow","round","MealIngredient","status","q","displayNameAndQuantity","MealComponent","className","colSpan","idx","TotalRow","targetStats","Row","value","TargetRow","PlanSelector","plan","setPlan","onChange","useCallback","e","parseInt","findIndex","_","getPlanIndex","p","i","App","useState","length","computeStatsOfMeals","nbFats","nbProts","computeStatsOfTarget","shoppingList","nbDays","quantitiesTotal","forEach","filter","unit","computeShoppingList","m","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09f2d712.chunk.js","sourcesContent":["import { allIngredients } from \"./data/ingredients\";\n\nexport const caloriesByMacro = {\n  prots: 4,\n  fats: 9,\n  carbs: 4,\n};\n\nexport type Macro = keyof typeof caloriesByMacro;\nexport type Stat = Macro | \"fibers\";\n\nexport interface Ingredient {\n  baseQuantity: \"100ml\" | \"100g\" | \"1unit\";\n  stats: Stats;\n}\n\nexport type Stats = { [m in Stat]: number };\n\nexport type IngredientName = keyof typeof allIngredients;\n\nexport const bodyWeightInKg = 79;\n\nexport const baseTarget = {\n  nbProtsPerKgOfBodyweight: 1.5,\n  fatPercentage: 25,\n  totalFibers: 38,\n};\n\nexport interface DailyTarget {\n  totalCalories: number;\n  nbProtsPerKgOfBodyweight: number;\n  fatPercentage: number;\n  totalFibers: number;\n}\nexport interface DailyPlan {\n  name: string;\n  meals: Meal[];\n  target?: DailyTarget;\n}\n\nexport interface Meal {\n  name: string;\n  content: Partial<Record<IngredientName, number>>;\n}\n","import { plan001 } from \"./plan001\";\nimport { plan002 } from \"./plan002\";\nimport { plan003 } from \"./plan003\";\nimport { plan004 } from \"./plan004\";\nimport { plan005 } from \"./plan005\";\nimport { plan006 } from \"./plan006\";\nimport { plan007 } from \"./plan007\";\nimport { plan008 } from \"./plan008\";\nimport { plan009 } from \"./plan009\";\nimport { plan010 } from \"./plan010\";\nimport { plan011 } from \"./plan011\";\nimport { plan012 } from \"./plan012\";\nimport { plan013 } from \"./plan013\";\nimport { plan014 } from \"./plan014\";\nimport { plan015 } from \"./plan015\";\nimport { plan016 } from \"./plan016\";\nimport { plan017 } from \"./plan017\";\nimport { plan018 } from \"./plan018\";\nimport { plan019 } from \"./plan019\";\nimport { plan020 } from \"./plan020\";\nimport { plan021 } from \"./plan021\";\nimport { plan022 } from \"./plan022\";\nimport { plan as plan023 } from \"./plan023\";\nimport { plan as plan024 } from \"./plan024\";\nimport { plan as plan025 } from \"./plan025\";\n\nexport const allPlans = [\n  plan001,\n  plan002,\n  plan003,\n  plan004,\n  plan005,\n  plan006,\n  plan007,\n  plan008,\n  plan009,\n  plan010,\n  plan011,\n  plan012,\n  plan013,\n  plan014,\n  plan015,\n  plan016,\n  plan017,\n  plan018,\n  plan019,\n  plan020,\n  plan021,\n  plan022,\n  plan023,\n  plan024,\n  plan025,\n];\n","import { DailyPlan } from \"../structure\";\n\nexport const plan001: DailyPlan = {\n  name: \"2700cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 60,\n        riz_sec: 250,\n        beurre: 11,\n        huile_olive: 18,\n        coulis_de_tomates: 100,\n        thon_boite_egoutte: 112 / 4, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"breakfastMix\",\n      content: {\n        beurre_cacahuete: 100,\n        lait: 100,\n        flocons_avoine_complete_quaker: 100,\n        fromage_blanc_3_2percent: 212.5,\n        whey: 12, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 180 * 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan002: DailyPlan = {\n  name: \"2500cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 100,\n        riz_sec: 240,\n        beurre: 11,\n        huile_olive: 18,\n        coulis_de_tomates: 50,\n        thon_boite_egoutte: 112 / 4, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"breakfastMix\",\n      content: {\n        beurre_cacahuete: 95,\n        lait: 150,\n        flocons_avoine_complete_quaker: 50,\n        fromage_blanc_2_8percent: 150,\n        whey: 25, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 180 * 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2500,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan003: DailyPlan = {\n  name: \"2500cals_no_gluten\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 100,\n        riz_sec: 280,\n        beurre: 11,\n        huile_olive: 18,\n        coulis_de_tomates: 0,\n        thon_boite_egoutte: 112 / 4, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"breakfastMix\",\n      content: {\n        beurre_cacahuete: 95,\n        lait: 300,\n        flocons_avoine_complete_quaker: 0,\n        fromage_blanc_2_8percent: 150,\n        whey: 15, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 180 * 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2500,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// essayer d'utiliser les packaging en entier (thon, FB, etc.) pour 3 jours\n// l'important c'est le nb de calories, après les pourcentages de prots/fats/carbs c'est moins important ! le but c'est juste d'avoir des ordres de grandeur\n// améliorer l'utilisation du peanut butter et du whey et du FB\n\nexport const plan004: DailyPlan = {\n  name: \"2550cals_no_gluten\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // j'ai pas réussi à avoir 300g. La prochaine fois acheter 300g ou un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        riz_sec: 280, // bien rincer le riz avant\n        beurre: 11,\n        huile_olive: 18,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1, // faire les oeufs à la poele, c'est plus simple\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete: 350 / 3, // un pot typique fait 350g\n        lait: 80 / 3, // devrait aider à diluer le pb. à mettre direct dans le pot et mélanger\n      },\n    },\n    {\n      name: \"shaker whey\",\n      content: {\n        lait: 250,\n        // fromage_blanc_2_8percent: 1000 / 3, // 1 pot fait 1kg\n        whey: 25, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 180 * 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2550,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// essayer d'utiliser les packaging en entier (thon, FB, etc.) pour 3 jours\n// l'important c'est le nb de calories, après les pourcentages de prots/fats/carbs c'est moins important ! le but c'est juste d'avoir des ordres de grandeur\n// améliorer l'utilisation du peanut butter et du whey et du FB\n\nexport const plan005: DailyPlan = {\n  name: \"plan2550cals_mamie_bio\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // j'ai pas réussi à avoir 300g. La prochaine fois acheter 300g ou un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        riz_sec: 285, // bien rincer le riz avant\n        beurre: 11,\n        huile_olive: 18,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1, // faire les oeufs à la poele, c'est plus simple\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_mamie_bio: 350 / 3, // un pot typique fait 350g\n        lait: 20, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    {\n      name: \"shaker whey\",\n      content: {\n        lait: 250,\n        // fromage_blanc_2_8percent: 1000 / 3, // 1 pot fait 1kg\n        whey: 25, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"fruits\",\n      content: {\n        pomme: 180 * 1,\n        banane: 1,\n      },\n    },\n    {\n      name: \"legumes\",\n      content: {\n        epinards_surgeles: 200,\n        courgette: 0.5,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2550,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2550 cals\n// pas de gluten\n// pas de lactose\n// pas de surgelés\n// plus de fibres (mais pas encore vraiment la dose recommandée)\nexport const plan006: DailyPlan = {\n  name: \"plan2550cals_sans_gluten_ni_lactose_ni_surgeles_mais_avec_plus_de_fibres\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 220,\n        beurre: 5,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 6 / 3, // faire les oeufs à la poele\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_mamie_bio: 350 / 6, // un pot typique fait 350g\n        lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    {\n      name: \"shaker whey\",\n      content: {\n        whey: 30, // une cuillere à raz fait 25g\n      },\n    },\n    {\n      name: \"bol de céréales\",\n      content: {\n        lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 100,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 2,\n        banane: 1,\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    totalCalories: 2550,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2650 cals\n// pas de gluten\n// pas de lactose\n// pas de surgelés\n// plus de fibres (essayer d'avoir la dose recommandée)\n// ajuster macros pour pas de sport (moins de prots)\nexport const plan007: DailyPlan = {\n  name: \"plan2650cals_sans_gluten_ni_lactose_ni_surgeles_et_toutes_fibres_et_moins_proteines\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 260 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 250,\n        beurre: 10,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        // oeuf: 6 / 3, // faire les oeufs à la poele\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_mamie_bio: 350 / 6, // un pot typique fait 350g\n        lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 2,\n        banane: 1,\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2650,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2650 cals\n// pas de gluten\n// pas de lactose\n// pas de surgelés\n// plus de fibres (essayer d'avoir la dose recommandée)\n// ajuster macros pour pas de sport (moins de prots)\nexport const plan008: DailyPlan = {\n  name: \"plan2650cals sans_vraiment_aucun_gluten ni_lactose ni_surgeles et_un_poil_trop_de_fibres et_moins_proteines\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 300 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 255,\n        beurre: 10,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    // {\n    //   name: \"peanut butter\",\n    //   content: {\n    //     beurre_cacahuete_mamie_bio: 350 / 6, // un pot typique fait 350g\n    //     lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n    //   },\n    // },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 180 * 1,\n        banane: 2,\n        avocado: 1,\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2650,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2650 cals\n// tjrs pas de gluten\n// pas de lactose\n// pas de surgelés\nexport const plan009: DailyPlan = {\n  name: \"plan2650cals_avec_beurre_cacahuete_go_nuts\",\n  meals: [\n    {\n      name: \"eau\",\n      content: {\n        eau: 1500,\n      },\n    },\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 250 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        // qd j'aurai le rice cooker\n        riz_sec: 255,\n        beurre: 10,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 65, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 180 * 1,\n        banane: 2,\n        // avocado: 1,\n        // attention on a pas de \"leafy vegetable\"\n        courgette: 1,\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2650,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// Buts :\n// 2650 cals\n// tjrs pas de gluten\n// pas de lactose\n// pas de surgelés\n// utiliser brocolis pour avoir des B9\nexport const plan010: DailyPlan = {\n  name: \"plan_avec_brocolis\",\n  meals: [\n    {\n      name: \"eau\",\n      content: {\n        eau: 1500,\n      },\n    },\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        poulet_cru: 250 / 3, // Acheter un poil plus, c'est pas grave, et le poids réel est un peu plus bas\n        // bien rincer le riz avant\n        // envisager du riz brun (pour les fibres)\n        // qd j'aurai le rice cooker\n        riz_sec: 255,\n        beurre: 10,\n        huile_olive: 15,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 65, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 180 * 1,\n        banane: 2,\n        brocoli: 250 / 3, // 1 bouquet devrait faire 250g : à confirmer !!\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2650,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan011: DailyPlan = {\n  name: \"plan_2750cals\",\n  meals: [\n    {\n      name: \"main\",\n      // celui-là j'en suis très content\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas\n        poulet_cru: 210 / 3,\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 280,\n        huile_olive: 20,\n        thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 70, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        pomme: 180 * 1,\n        banane: 2,\n        brocoli: 250 / 3, // 1 bouquet devrait faire 250g : à confirmer !!\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2750,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// j'arrête le thon, trop de doute sur sa conservation\nexport const plan012: DailyPlan = {\n  name: \"plan_2750cals_sans_thon\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas\n        poulet_cru: 210 / 3,\n        // envisager du riz brun (pour les fibres)\n        riz_sec: 280,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 80, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        // note : la prochaine fois faudrait peser les carottes et les pommes\n        // et obtenir leurs macros exacte basées sur le poids\n        pomme: 180 * 1,\n        banane: 2,\n        brocoli: 630 / 3, // 1 beau bouquet fait 630g\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2750,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\n// trop de prots, c'est pas parfait.\n// à tester, à faire de temps en temps peut-être\n\nexport const plan013: DailyPlan = {\n  name: \"plan_2750cals_riz_complet\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas\n        poulet_cru: 210 / 3,\n        riz_complet_markal_bio_sec: 270,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 80, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 145,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        // note : la prochaine fois faudrait peser les carottes et les pommes\n        // et obtenir leurs macros exacte basées sur le poids\n        pomme: 180 * 1,\n        banane: 2,\n        brocoli: 630 / 3, // 1 beau bouquet fait 630g\n        carotte: 190 * 1,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2750,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan014: DailyPlan = {\n  name: \"plan_2875cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas\n        poulet_cru: 210 / 3,\n        riz_sec: 270,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 97, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        pomme: 180 * 1, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 1 beau bouquet fait 630g\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 2875,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan015: DailyPlan = {\n  name: \"plan_3000cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        riz_sec: 290,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 97, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        pomme: 180 * 1, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 1 beau bouquet fait 630g\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3000,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan016: DailyPlan = {\n  name: \"plan_3000cals_again_more_glucs\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        riz_sec: 280,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 85, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        pomme: 180 * 2, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 1 bouquet moyen fait 630g\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3000,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan017: DailyPlan = {\n  name: \"plan_3000cals_with_lactose\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        riz_sec: 280,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts_4_epices: 95, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        lait: 240,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        pomme: 180 * 1, // 1 grosse pomme fait 180g\n        carotte: 190 * 2, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 1 bouquet moyen fait 630g\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3000,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan018: DailyPlan = {\n  name: \"plan_3000cals_pas_lactose_mais_gluten\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        pates_sec: 280,\n        // riz_sec: 280,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts_4_epices: 95, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        lait_d_amande: 240,\n        // lait: 240, // le lait semble poser des pbs... un petit peu\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        courgette: 1,\n        pomme: 180 * 1, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 1 bouquet moyen fait 630g\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3000,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan019: DailyPlan = {\n  name: \"plan_3000cals_riz_mais_aussi_gluten\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        // pates_sec: 280,\n        riz_sec: 280,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"petit dej\",\n      content: {\n        lait_d_amande: 240,\n        // lait: 240, // le lait semble poser des pbs... un petit peu\n        // flocons_avoine_sans_gluten_grillon_or: 50,\n        chocapic: 57, // ça remplit à peu près mes petites boites\n        beurre_cacahuete_go_nuts_4_epices: 90,\n        tranche_pain_de_mie: 4,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        courgette: 1,\n        pomme: 180 * 1, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 1 bouquet moyen fait 630g\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3000,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan020: DailyPlan = {\n  name: \"plan_3000cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        riz_sec: 290,\n        huile_olive: 20,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 97, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    // {\n    //   name: \"shaker whey\",\n    //   content: {\n    //     whey: 30, // une cuillere à raz fait 25g\n    //   },\n    // },\n    {\n      name: \"bol de céréales\",\n      content: {\n        // lait_d_amande: 100,\n        flocons_avoine_sans_gluten_grillon_or: 150,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        pomme: 180 * 1.5, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        epinards_surgeles: 210,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3000,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan021: DailyPlan = {\n  name: \"plan_3100cals\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        riz_sec: 300,\n        huile_olive: 20,\n        beurre: 5,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 97, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    {\n      name: \"bol de céréales\",\n      content: {\n        flocons_avoine_sans_gluten_grillon_or: 100,\n        chocapic: 50,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        pomme: 180 * 1.5, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        epinards_surgeles: 210,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3100,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan022: DailyPlan = {\n  name: \"plan_3100cals_broccoli_chocapic\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        // attention pas sûr de pouvoir trouver cette quantité !!\n        // Acheter un poil plus, c'est pas grave, le poids réel est souvent un peu plus bas (de ~10g)\n        poulet_cru: 210 / 3,\n        riz_sec: 300,\n        huile_olive: 20,\n        beurre: 5,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 97, // un pot typique fait 350g\n        // lait_d_amande: 15, // chaque jour, mettre juste 20ml de lait dans le pot pour diluer un peu\n      },\n    },\n    {\n      name: \"bol de céréales\",\n      content: {\n        flocons_avoine_sans_gluten_grillon_or: 100,\n        chocapic: 50,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 2,\n        pomme: 180 * 1.5, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3,\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3100,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan: DailyPlan = {\n  name: \"plan_3100cals_broccoli_pas_chocapic\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 210 / 3,\n        riz_sec: 300,\n        huile_olive: 20,\n        beurre: 5,\n        // thon_boite_egoutte: 93 / 3, // une boite fait 112 ou 93\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"peanut butter\",\n      content: {\n        beurre_cacahuete_go_nuts: 97,\n      },\n    },\n    {\n      name: \"bol de céréales\",\n      content: {\n        flocons_avoine_sans_gluten_grillon_or: 150,\n        // chocapic: 50,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 7 / 3, // c'est pour des petites bananes\n        pomme: 180 * 1.5, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 630g c'est un bouquet moyen\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3100,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan: DailyPlan = {\n  name: \"plan_3100cals_no_peanut_butter\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 210 / 3,\n        riz_sec: 300,\n        huile_olive: 20,\n        beurre: 5,\n        oeuf: 1,\n      },\n    },\n    {\n      name: \"other\",\n      content: {\n        pates_sec: 90,\n        thon_boite_egoutte: 112 / 3, // une boite fait 112 ou 93\n      },\n    },\n    {\n      name: \"bol de céréales\",\n      content: {\n        flocons_avoine_sans_gluten_grillon_or: 150,\n        chocapic: 50,\n        // lait: 200,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 7 / 3, // c'est pour des petites bananes\n        pomme: 180 * 1.5, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 630g c'est un bouquet moyen\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3100,\n  },\n};\n","import { baseTarget, DailyPlan } from \"../structure\";\n\nexport const plan: DailyPlan = {\n  name: \"plan_3100cals_no_pb_no_gluten\",\n  meals: [\n    {\n      name: \"main\",\n      content: {\n        poulet_cru: 210 / 3,\n        riz_sec: 300,\n        huile_olive: 30,\n        beurre: 10,\n        oeuf: 1,\n        thon_boite_egoutte: 112, // une boite fait 112 ou 93\n      },\n    },\n    {\n      name: \"bol de céréales\",\n      content: {\n        flocons_avoine_sans_gluten_grillon_or: 200,\n        // chocapic: 50,\n        // lait: 200,\n      },\n    },\n    {\n      name: \"fruits et légumes\",\n      content: {\n        banane: 7 / 3, // c'est pour des petites bananes\n        pomme: 180 * 1.5, // 1 grosse pomme fait 180g\n        carotte: 190 * 1, // 1 grosse carotte (genre celle de Monop) fait 190g\n        brocoli: 630 / 3, // 630g c'est un bouquet moyen\n      },\n    },\n  ],\n  target: {\n    ...baseTarget,\n    nbProtsPerKgOfBodyweight: 1,\n    totalCalories: 3100,\n  },\n};\n","// idée d'ingrédients à intégrer :\n// fromage salakis (très bon, très fat/prot, mais lactose)\n// fromage blanc\n// pâtes (gluten)\n// conserves de pois / pois chiches / haricots / etc.\n// sauces diverses\n// autres céréales sucrées diverses\n// surgelés (épinards, ...)\n// confiture\n// des trucs à grignoter, junk food, apéros, etc.\n\nimport { Ingredient } from \"../structure\";\n\nexport const allIngredients = {\n  eau: dsl(\"100ml\", 0, 0, 0, 0),\n  poulet_cru: dsl(\"100g\", 24, 2, 0, 0),\n  pates_sec: dsl(\"100g\", 13, 2, 72, 3),\n  // il y a des infos contradictoires sur le quantité de fibres dans le riz. Ce chiffre est plutôt conservateur\n  riz_sec: dsl(\"100g\", 6.7, 0.5, 80, 0.7),\n  // Riz trouvé chez naturalia, en 1kg. 4.05€/kg. ~45min cuisson\n  riz_complet_markal_bio_sec: dsl(\"100g\", 9.7, 1.2, 74.5, 4.5),\n  beurre: dsl(\"100g\", 0.7, 82, 0.5, 0),\n  huile_olive: dsl(\"100ml\", 0, 92, 92, 0),\n  coulis_de_tomates: dsl(\"100g\", 1.2, 0.1, 4.5, 1.6),\n  thon_boite_egoutte: dsl(\"100g\", 27, 8.1, 0, 0),\n  fromage_blanc_3_2percent: dsl(\"100g\", 5.7, 3.2, 6.6, 0),\n  fromage_blanc_2_8percent: dsl(\"100g\", 6.7, 2.8, 4.9, 0),\n  oeuf: dsl(\"1unit\", 6, 5, 1, 0),\n  beurre_cacahuete: dsl(\"100g\", 29, 51, 12, 6),\n  beurre_cacahuete_mamie_bio: dsl(\"100g\", 28, 48, 14, 6),\n  beurre_cacahuete_go_nuts: dsl(\"100g\", 26.1, 49.1, 14.8, 8.6), // trouvable chez biocoop\n  beurre_cacahuete_go_nuts_4_epices: dsl(\"100g\", 25, 47.1, 16.5, 8.2), // trouvable chez biocoop\n  lait: dsl(\"100ml\", 3.3, 1.6, 4.7, 0),\n  lait_d_amande: dsl(\"100ml\", 1, 2, 6, 0.3), // pour les fibres, j'ai vu 0.2 et 0.4\n  flocons_avoine_complete_quaker: dsl(\"100g\", 11, 8, 60, 9),\n  flocons_avoine_sans_gluten_grillon_or: dsl(\"100g\", 9.7, 5.4, 61, 11), // https://www.naturalia.fr/flocons-avoine-sg-500g\n  weetabix: dsl(\"100g\", 12, 2, 69, 0), // TODO check les fibres\n  chocapic: dsl(\"100g\", 8.1, 4.5, 75.8, 0), // TODO check les fibres\n  whey: dsl(\"100g\", 75, 5.8, 7.8, 0),\n  pain_de_mie: dsl(\"100g\", 8.1, 5.2, 47.1, 7.1),\n  // 1 tranche fait 26.8g\n  tranche_pain_de_mie: dsl(\"1unit\", 2.1708, 1.3936, 12.6228, 1.9028),\n  epinards_surgeles: dsl(\"100g\", 3, 0.5, 1.4, 2.37),\n  epinards_surgeles_haches_monoprix: dsl(\"100g\", 2.1, 0, 1.1, 2.8),\n  courgette: dsl(\"1unit\", 1.3, 0.7, 5.4, 2),\n  // une belle grosse carotte, genre celle à Monop, fait ~190g\n  carotte: dsl(\"100g\", 0.8, 0.2, 8.2, 3),\n  // une belle grosse pomme, genre celle à Monop, fait 180g\n  pomme: dsl(\"100g\", 0.3, 0.2, 14, 2.4),\n  banane: dsl(\"1unit\", 0, 1, 27, 3.1),\n  avocado: dsl(\"1unit\", 4, 29.5, 17, 13.5),\n  // un beau bouquet de broccoli, pied compris, fait 630-691g\n  brocoli: dsl(\"100g\", 2.75, 0.44, 6.6, 2.64),\n};\n\nfunction dsl(\n  baseQuantity: Ingredient[\"baseQuantity\"],\n  prots: number,\n  fats: number,\n  carbs: number,\n  fibers: number\n): Ingredient {\n  return {\n    baseQuantity,\n    stats: {\n      prots,\n      fats,\n      carbs,\n      fibers,\n    },\n  };\n}\n","import { allIngredients } from \"./data/ingredients\";\nimport {\n  bodyWeightInKg,\n  caloriesByMacro,\n  DailyPlan,\n  DailyTarget,\n  IngredientName,\n  Macro,\n  Stats,\n  Meal,\n  Stat,\n} from \"./structure\";\n\nexport function computeStatsOfIngredientForQuantity(\n  name: IngredientName,\n  quantity: number\n): Stats {\n  const ingredient = allIngredients[name];\n  function computeStat(stat: Stat) {\n    const r = quantity * ingredient.stats[stat];\n    if (\n      ingredient.baseQuantity === \"100g\" ||\n      ingredient.baseQuantity === \"100ml\"\n    ) {\n      return r / 100;\n    }\n    return r;\n  }\n  return {\n    prots: computeStat(\"prots\"),\n    fats: computeStat(\"fats\"),\n    carbs: computeStat(\"carbs\"),\n    fibers: computeStat(\"fibers\"),\n  };\n}\n\nexport function computeStatsOfMeal(meal: Meal): Stats {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n\n  return sumStats(\n    entries.map(([name, quantity]) => {\n      return computeStatsOfIngredientForQuantity(name, quantity);\n    })\n  );\n}\n\nexport function computeStatsOfMeals(meals: Meal[]): Stats {\n  return sumStats(meals.map(computeStatsOfMeal));\n}\n\nexport function sumStats(statsArray: Stats[]): Stats {\n  return statsArray.reduce((previous: Stats, current: Stats) => {\n    return {\n      prots: previous.prots + current.prots,\n      fats: previous.fats + current.fats,\n      carbs: previous.carbs + current.carbs,\n      fibers: previous.fibers + current.fibers,\n    };\n  });\n}\n\nexport function computeCaloriesFromStats(stats: Stats): number {\n  return computeDiagnostic(stats).calories;\n}\n\nexport function computeDiagnostic(stats: Stats) {\n  const protCalories = stats.prots * caloriesByMacro.prots;\n  const fatsCalories = stats.fats * caloriesByMacro.fats;\n  const carbsCalories = stats.carbs * caloriesByMacro.carbs;\n  const calories = protCalories + fatsCalories + carbsCalories;\n  return {\n    calories,\n    percentages: {\n      prots: (100 * protCalories) / calories,\n      fats: (100 * fatsCalories) / calories,\n      carbs: (100 * carbsCalories) / calories,\n    },\n  };\n}\n\nexport function computeStatsOfTarget(target: DailyTarget): Stats {\n  const { totalCalories, fatPercentage, nbProtsPerKgOfBodyweight } = target;\n  const nbFats = (totalCalories * (fatPercentage / 100)) / caloriesByMacro.fats;\n  const nbProts = bodyWeightInKg * nbProtsPerKgOfBodyweight;\n  const nbCarbs =\n    (totalCalories -\n      nbFats * caloriesByMacro.fats -\n      nbProts * caloriesByMacro.prots) /\n    caloriesByMacro.carbs;\n  return {\n    prots: nbProts,\n    fats: nbFats,\n    carbs: nbCarbs,\n    fibers: target.totalFibers,\n  };\n}\n\nexport function computeShoppingList(plan: DailyPlan, nbDays: number): string[] {\n  const quantitiesTotal: Partial<Record<IngredientName, number>> = {};\n  plan.meals.forEach((meal) => {\n    const entries = Object.entries(meal.content) as [IngredientName, number][];\n    entries.forEach(([name, quantity]) => {\n      quantitiesTotal[name] = (quantitiesTotal[name] || 0) + quantity * nbDays;\n    });\n  });\n\n  const entries = Object.entries(quantitiesTotal) as [IngredientName, number][];\n  return entries\n    .filter((_) => _[1] > 0)\n    .map(([name, quantity]) => {\n      const { baseQuantity } = allIngredients[name];\n      const unit =\n        baseQuantity === \"100g\" ? \"g\" : baseQuantity === \"100ml\" ? \"ml\" : \"\";\n      return `${quantity}${unit} ${name}`;\n    });\n}\n","export function roundWithDecimals(nb: number, decimals: number): number {\n  const factor = Math.pow(10, decimals);\n  return Math.round(nb * factor) / factor;\n}\n\n/**\n * Convert a number to a color using hsl, with range definition.\n * Example: if min/max are 0/1, and i is 0.75, the color is closer to green.\n * Example: if min/max are 0.5/1, and i is 0.75, the color is in the middle between red and green.\n * @param i (floating point, range 0 to 1)\n * param min (floating point, range 0 to 1, all i at and below this is red)\n * param max (floating point, range 0 to 1, all i at and above this is green)\n */\nexport function numberToColorHsl(i: number, min: number, max: number) {\n  var ratio = i;\n  if (min > 0 || max < 1) {\n    if (i < min) {\n      ratio = 0;\n    } else if (i > max) {\n      ratio = 1;\n    } else {\n      var range = max - min;\n      ratio = (i - min) / range;\n    }\n  }\n\n  // as the function expects a value between 0 and 1, and red = 0° and green = 120°\n  // we convert the input to the appropriate hue value\n  var hue = (ratio * 1.2) / 3.6;\n  //if (minMaxFactor!=1) hue /= minMaxFactor;\n  //console.log(hue);\n\n  // we convert hsl to rgb (saturation 100%, lightness 50%)\n  var rgb = hslToRgb(hue, 1, 0.5);\n  // we format to css value and return\n  return \"rgb(\" + rgb[0] + \",\" + rgb[1] + \",\" + rgb[2] + \")\";\n}\n\n/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {number}  h       The hue\n * @param   {number}  s       The saturation\n * @param   {number}  l       The lightness\n * @return  {Array}           The RGB representation\n */\nfunction hslToRgb(h: number, s: number, l: number) {\n  var r, g, b;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var hue2rgb = function hue2rgb(p: number, q: number, t: number) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { allPlans } from \"./data/allPlans\";\nimport { allIngredients } from \"./data/ingredients\";\nimport {\n  computeCaloriesFromStats,\n  computeDiagnostic,\n  computeShoppingList,\n  computeStatsOfIngredientForQuantity,\n  computeStatsOfMeal,\n  computeStatsOfMeals,\n  computeStatsOfTarget,\n} from \"./logic\";\nimport {\n  bodyWeightInKg,\n  DailyPlan,\n  IngredientName,\n  Meal,\n  Stat,\n  Stats,\n} from \"./structure\";\nimport \"./style.css\";\nimport { roundWithDecimals } from \"./utils\";\n\nfunction MealIngredient({\n  name,\n  quantity,\n}: {\n  name: IngredientName;\n  quantity: number;\n}) {\n  const ingredient = allIngredients[name];\n\n  function displayNameAndQuantity() {\n    const q = roundWithDecimals(quantity, 2);\n    switch (ingredient.baseQuantity) {\n      case \"1unit\":\n        return `${q} ${name}`;\n      case \"100g\":\n        return `${q}g de ${name}`;\n      case \"100ml\":\n        return `${q}ml de ${name}`;\n    }\n  }\n  const status = computeStatsOfIngredientForQuantity(name, quantity);\n\n  return (\n    <tr>\n      <td>{displayNameAndQuantity()}</td>\n      <td>{roundWithDecimals(computeCaloriesFromStats(status), 1)}</td>\n      <td>{roundWithDecimals(status.prots, 1)}</td>\n      <td>{roundWithDecimals(status.fats, 1)}</td>\n      <td>{roundWithDecimals(status.carbs, 1)}</td>\n      <td>{roundWithDecimals(status.fibers, 1)}</td>\n    </tr>\n  );\n}\n\nfunction MealComponent(meal: Meal) {\n  const entries = Object.entries(meal.content) as [IngredientName, number][];\n  const stats = computeStatsOfMeal(meal);\n  return (\n    <>\n      <tr className=\"meal-title\">\n        <td colSpan={4}>{meal.name}</td>\n      </tr>\n      <tr>\n        <th>ingredient</th>\n        <th>calories</th>\n        <th>prots</th>\n        <th>fats</th>\n        <th>carbs</th>\n        <th>fibers</th>\n      </tr>\n      {entries.map(([name, quantity], idx) => {\n        if (quantity <= 0) return null;\n        return <MealIngredient {...{ name, quantity }} />;\n      })}\n      <tr className=\"meal-total\">\n        <td></td>\n        <td>{Math.round(computeCaloriesFromStats(stats))}</td>\n        <td>{Math.round(stats.prots)}</td>\n        <td>{Math.round(stats.fats)}</td>\n        <td>{Math.round(stats.carbs)}</td>\n        <td>{Math.round(stats.fibers)}</td>\n      </tr>\n    </>\n  );\n}\n\nfunction TotalRow({\n  stats,\n  targetStats,\n}: {\n  stats: Stats;\n  targetStats: Stats | null;\n}) {\n  function Row({ stat }: { stat: Stat | \"calories\" }) {\n    const value =\n      stat === \"calories\" ? computeCaloriesFromStats(stats) : stats[stat];\n    return <td>{Math.round(value)}</td>;\n  }\n\n  return (\n    <tr className=\"total\">\n      <td>all</td>\n      <Row stat={\"calories\"} />\n      <Row stat={\"prots\"} />\n      <Row stat={\"fats\"} />\n      <Row stat={\"carbs\"} />\n      <Row stat={\"fibers\"} />\n    </tr>\n  );\n}\n\nfunction TargetRow({ targetStats }: { targetStats: Stats }) {\n  return (\n    <tr className=\"target\">\n      <td>target</td>\n      <td>{Math.round(computeCaloriesFromStats(targetStats))}</td>\n      <td>{Math.round(targetStats.prots)}</td>\n      <td>{Math.round(targetStats.fats)}</td>\n      <td>{Math.round(targetStats.carbs)}</td>\n      <td>{Math.round(targetStats.fibers)}</td>\n    </tr>\n  );\n}\n\nfunction PlanSelector({\n  plan,\n  setPlan,\n}: {\n  plan: DailyPlan;\n  setPlan: (p: DailyPlan) => void;\n}) {\n  const onChange = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setPlan(allPlans[parseInt(e.target.value, 10)]);\n    },\n    [setPlan]\n  );\n\n  function getPlanIndex(plan: DailyPlan) {\n    return allPlans.findIndex((_) => _ === plan);\n  }\n\n  return (\n    <select value={getPlanIndex(plan)} onChange={onChange}>\n      {allPlans.map((p, i) => {\n        return (\n          <option key={i} value={i}>\n            {p.name}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nfunction App() {\n  const [plan, setPlan] = useState<DailyPlan>(allPlans[allPlans.length - 1]);\n\n  const { meals, target } = plan;\n  const stats = computeStatsOfMeals(meals);\n  const targetStats = target ? computeStatsOfTarget(target) : null;\n  const { calories, percentages } = computeDiagnostic(stats);\n  const nbDays = 3;\n  const shoppingList = computeShoppingList(plan, nbDays);\n  return (\n    <>\n      <PlanSelector {...{ plan, setPlan }} />\n      <table>\n        {meals.map((m) => {\n          return <MealComponent {...m} />;\n        })}\n        <tr className=\"spacer\">\n          <td colSpan={5}></td>\n        </tr>\n\n        <TotalRow stats={stats} targetStats={targetStats} />\n        {targetStats ? <TargetRow targetStats={targetStats} /> : null}\n      </table>\n\n      <div className=\"diagnostic\">\n        <p>total calories = {Math.round(calories)} calories</p>\n        <p>Percentages :</p>\n        <ul>\n          <li>\n            {Math.round(percentages.prots)}% of prots (\n            {roundWithDecimals(stats.prots / bodyWeightInKg, 2)}/kg of\n            bodyweight, for {bodyWeightInKg}kg)\n          </li>\n          <li>{Math.round(percentages.fats)}% of fats</li>\n          <li>{Math.round(percentages.carbs)}% of carbs</li>\n        </ul>\n      </div>\n      <div className=\"shopping-list\">\n        <p>Shopping list pour {nbDays} jours</p>\n        <ul>\n          {shoppingList.map((str) => {\n            return <li key={str}>{str}</li>;\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}